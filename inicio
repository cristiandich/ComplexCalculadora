package Complex;
public class ComplexCalculator {

	@SuppressWarnings("hiding")
	public static <Complex> void main(String[] args) {
		
		Complex comp1 = null;
		Complex comp2 = null;
		Complex compR;//segundo operando complexo
		int op;//operação escolhida
		do
		{
			
			op = menu ();
			Complex.clearError();// limpa o erro da última operação
			compR = null;//limpa o resultado
			
			switch (op)
			{
			
			case 1 : comp1 = readComplex (); break;
			case 2 : comp2 = readComplex (); break;
			case 3 : if(comp1 != null) compR = comp1.add (comp2); break;
			case 3 : if(comp1 != null) compR = comp1.sub (comp2); break;
			case 3 : if(comp1 != null) compR = comp1.mul (comp2); break;
			case 3 : if(comp1 != null) compR = comp1.div (comp2); 
			
			}
			
			if (op >= 3 && op <= 6)//escrita do resultado complexo ou de uma mensagem de erro
			{
				if(Complex.getError () == Complex.ComplexError.ok)
					if(compR == null) printf("falta o primeiro operando\n", null);
					else printf("Resultado -> %s\n", compR.toString());
				else printf ("Erro -> %s\n", Complex.toString());
				//pausa para ver o resultado no monitor
				readChar ("Carregue em enter para continuar");
			}
	}while (op != 0);

}

	//definição de subprogramas


	private static int menu() {
		int op;
		clear ();
		printf ("1 - Ler o primeiro complexo\n");
		printf ("2 - Ler o segundo complexo\n");
		printf ("3 - somar os complexo\n");
		printf ("4 - subtrair os complexos\n");
		printf ("5 - multiplicar os complexos\n");
		printf ("6 - dividir os complexos\n");
		printf ("0 - sair do programa\n");
do
{
	op = readInt ("opção?");
	
}while (op < 0)|| (op > 6);
		return op;
	}

}
	}



	private static Complex readComplex() {
		
		double real = readDouble ("Parte real?");
		double imag = readDouble ("Parte imaginária?");
		return new Complex (real, imag);
	}

}
